// __multiversion__
// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.

#include "fragmentVersionCentroid.h"

#if __VERSION__ >= 300
	#ifndef BYPASS_PIXEL_SHADER
		#if defined(TEXEL_AA) && defined(TEXEL_AA_FEATURE)
			_centroid in highp vec2 uv0;
			_centroid in highp vec2 uv1;
		#else
			_centroid in vec2 uv0;
			_centroid in vec2 uv1;
		#endif
	#endif
#else
	#ifndef BYPASS_PIXEL_SHADER
		varying vec2 uv0;
		varying vec2 uv1;
	#endif
#endif

varying vec4 color;
varying highp vec3 wpos;

#ifdef FOG
varying vec4 fogColor;
#endif

#include "uniformShaderConstants.h"
#include "ToneLWSPE.h"
#include "util.h"

uniform vec2 FOG_CONTROL;
uniform vec4 FOG_COLOR;
uniform float RENDER_DISTANCE;

LAYOUT_BINDING(0) uniform sampler2D TEXTURE_0;
LAYOUT_BINDING(1) uniform sampler2D TEXTURE_1;
LAYOUT_BINDING(2) uniform sampler2D TEXTURE_2;

void main()
{
#ifdef BYPASS_PIXEL_SHADER
	gl_FragColor = vec4(0, 0, 0, 0);
	return;
#else 

#if USE_TEXEL_AA
	vec4 diffuse = texture2D_AA(TEXTURE_0, uv0);
#else
	vec4 diffuse = texture2D(TEXTURE_0, uv0);
#endif
	
#ifdef SEASONS_FAR
	diffuse.a = 1.0;
#endif

#if USE_ALPHA_TEST
	#ifdef ALPHA_TO_COVERAGE
	#define ALPHA_THRESHOLD 0.05
	#else
	#define ALPHA_THRESHOLD 0.5
	#endif
	if(diffuse.a < ALPHA_THRESHOLD)
		discard;
#endif
	
vec4 inColor = color;

#if defined(BLEND)
	diffuse.a *= inColor.a;
#endif

#if !defined(ALWAYS_LIT)
	diffuse *= texture2D( TEXTURE_1, uv1 );
#endif

#ifndef SEASONS
	#if !USE_ALPHA_TEST && !defined(BLEND)
		diffuse.a = inColor.a;
	#endif
	
	diffuse.rgb *= inColor.rgb;
#else
	vec2 uv = inColor.xy;
	diffuse.rgb *= mix(vec3(1.0,1.0,1.0), texture2D( TEXTURE_2, uv).rgb*2.0, inColor.b);
	diffuse.rgb *= inColor.aaa;
	diffuse.a = 1.0;
#endif

diffuse.rgb += RazzleMapping(diffuse.rgb);

//torch color
float jarak = length(uv1.x*.1); 
vec3 torch = vec3(0.7, 0.3, 0.0); 
diffuse.rgb += jarak * torch * (uv1.x*0.5);
//diffuse.rgb += vec3( .7, .3, .0 ) * uv.1 * .6;

//sea_latern
vec3 torch_undw = vec3(0.0, 0.3, 0.6);
float jarak1 = length(uv1.x-0.34);
float semut1 = smoothstep(0.3, 0.5, jarak1);
vec3 wtd = vec3(.87, .415, .0);
if(FOG_CONTROL.x == 0.0){
float jarak = length(uv1.x-0.32);
float semut = smoothstep (0.3, 0.5, jarak);
diffuse.rgb += torch_undw * semut * (uv1.x * 1.8);
}else{
wtd.rgb = vec3(.87, .415, .0);
diffuse.rgb += (wtd * semut1 * (mod(uv1.x, 1.0)*0.8));
}

#if defined(BLEND) || defined(FOG)
if(color.b>color.r){
diffuse.rgb *= vec3(0.0);
diffuse.rgb += vec3(0.05,0.4,0.3);
//perform to transparent
diffuse.rgb += clamp(length(wpos.xz)/RENDER_DISTANCE*2.0,0.0,1.0)*vec3(0.4,0.4,0.4);

//The uv will detect color
if(uv1.y<0.875){
diffuse.rgb *= vec3(-0.35);
}
//get transparency
diffuse.a *= clamp(length(wpos.xyz*3.0)/RENDER_DISTANCE*1.0,0.8,1.0);
if(FOG_COLOR.r*1.0>FOG_COLOR.b){
diffuse.rgb += clamp(1.0-length(-wpos.z*2.0)/RENDER_DISTANCE*1.0,0.0,1.0)*vec3(0.4,0.6,0.4)*length(wpos.x*2.0)/RENDER_DISTANCE*1.0;

}}
#endif

if(uv1.y < 0.865){ diffuse.rgb *= vec3(0.90)+uv1.x*0.15;}
if(uv1.y < 0.867){ diffuse.rgb *= vec3(0.90)+uv1.x*0.15; }
if(uv1.y < 0.869){ diffuse.rgb *= vec3(0.90)+uv1.x*0.15; }
if(uv1.y < 0.871){ diffuse.rgb *= vec3(0.90)+uv1.x*0.15; }
if(color.a < 0.59){ diffuse.rgb *= vec3(0.90)+uv1.x*0.15; }
if(color.a < 0.59){ diffuse.rgb *= vec3(0.90)+uv1.x*0.15; }
if(color.a < 0.6){ diffuse.rgb *= vec3(0.90)+uv1.x*0.15; }

float sha=color.r+color.g+color.b;
if(color.r+color.b < color.g*1.5) { sha*=2.; }
if(sha<2.0) {
diffuse.rgb*=.6;
}

#ifdef FOG
	diffuse.rgb = mix( diffuse.rgb, fogColor.rgb, fogColor.a );
#endif

	gl_FragColor = diffuse;
	
#endif // BYPASS_PIXEL_SHADER
}
